#!/bin/bash

# ============================================================================
# üê≥ Docker ‚Üí QCOW2 Converter
# ============================================================================
# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Docker –æ–±—Ä–∞–∑ –≤ QCOW2 —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å QEMU
# ============================================================================

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
DOCKER_IMAGE="${1:-}"
OUTPUT_QCOW2="${2:-}"
VM_SIZE="${3:-2G}"
TEMP_DIR="${4:-/tmp/docker-to-qcow2-$$}"

if [[ -z "$DOCKER_IMAGE" || -z "$OUTPUT_QCOW2" ]]; then
    log_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <docker-image> <output.qcow2> [vm-size] [temp-dir]"
    log_info "–ü—Ä–∏–º–µ—Ä: $0 desqemu-alpine:latest app.qcow2 4G"
    exit 1
fi

log_info "üê≥ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–∞ –≤ QCOW2"
log_info "   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: $DOCKER_IMAGE"
log_info "   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: $OUTPUT_QCOW2"
log_info "   ‚Ä¢ –†–∞–∑–º–µ—Ä –í–ú: $VM_SIZE"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
command -v docker >/dev/null 2>&1 || { log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; exit 1; }
command -v qemu-img >/dev/null 2>&1 || { log_error "qemu-img –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; exit 1; }

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p "$TEMP_DIR"
cd "$TEMP_DIR"

log_info "üîß –≠–∫—Å–ø–æ—Ä—Ç Docker –æ–±—Ä–∞–∑–∞ –≤ rootfs..."

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
CONTAINER_ID=$(docker create "$DOCKER_IMAGE" 2>/dev/null || {
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑ –æ–±—Ä–∞–∑–∞: $DOCKER_IMAGE"
    exit 1
})

# –≠–∫—Å–ø–æ—Ä—Ç rootfs
docker export "$CONTAINER_ID" | tar -x
docker rm "$CONTAINER_ID" >/dev/null

log_success "‚úÖ Rootfs —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω"

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ QCOW2 –æ–±—Ä–∞–∑–∞
log_info "üíø –°–æ–∑–¥–∞–Ω–∏–µ QCOW2 –æ–±—Ä–∞–∑–∞..."
qemu-img create -f qcow2 "$OUTPUT_QCOW2" "$VM_SIZE"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ –∫–∞–∫ ext4
log_info "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã ext4..."
mkfs.ext4 -F "$OUTPUT_QCOW2" >/dev/null 2>&1 || {
    log_warning "‚ö†Ô∏è mkfs.ext4 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π QCOW2"
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ –≤–Ω—É—Ç—Ä–∏ QCOW2
    tar -czf rootfs.tar.gz --exclude='./dev/*' --exclude='./proc/*' --exclude='./sys/*' \
        --exclude='./tmp/*' --exclude='./run/*' --exclude='./mnt/*' --exclude='./media/*' \
        --exclude='./.dockerenv' . 2>/dev/null || true
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    cat > boot.sh << 'EOF'
#!/bin/sh
# DESQEMU Alpine Boot Script
echo "üöÄ –ó–∞–ø—É—Å–∫ DESQEMU Alpine Linux..."
cd /
tar -xzf rootfs.tar.gz 2>/dev/null || true
exec /sbin/init
EOF
    
    chmod +x boot.sh
    
    log_success "‚úÖ QCOW2 –æ–±—Ä–∞–∑ —Å–æ–∑–¥–∞–Ω —Å —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–º rootfs"
}

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
cd /
rm -rf "$TEMP_DIR"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
if [[ -f "$OUTPUT_QCOW2" ]]; then
    QCOW2_SIZE=$(du -h "$OUTPUT_QCOW2" | cut -f1)
    log_success "üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    log_info "   ‚Ä¢ –§–∞–π–ª: $OUTPUT_QCOW2"
    log_info "   ‚Ä¢ –†–∞–∑–º–µ—Ä: $QCOW2_SIZE"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ QCOW2
    log_info "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ QCOW2:"
    qemu-img info "$OUTPUT_QCOW2" | sed 's/^/   /'
else
    log_error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QCOW2 –æ–±—Ä–∞–∑"
    exit 1
fi

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞
QCOW2_DIR=$(dirname "$OUTPUT_QCOW2")
QCOW2_NAME=$(basename "$OUTPUT_QCOW2" .qcow2)

cat > "$QCOW2_DIR/run-$QCOW2_NAME.sh" << EOF
#!/bin/bash

# üöÄ DESQEMU Runner –¥–ª—è $QCOW2_NAME
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞

QEMU_BIN=\${QEMU_BIN:-qemu-system-x86_64}
MEMORY=\${MEMORY:-2G}
CPUS=\${CPUS:-2}
PORT=\${PORT:-8080}

echo "üöÄ –ó–∞–ø—É—Å–∫ DESQEMU $QCOW2_NAME..."
echo "   ‚Ä¢ –ü–∞–º—è—Ç—å: \$MEMORY"
echo "   ‚Ä¢ CPU: \$CPUS"
echo "   ‚Ä¢ –ü–æ—Ä—Ç: \$PORT"

\$QEMU_BIN \\
  -M q35 \\
  -m \$MEMORY \\
  -smp \$CPUS \\
  -netdev user,id=net0,hostfwd=tcp::\$PORT-:80 \\
  -device virtio-net,netdev=net0 \\
  -drive file="$OUTPUT_QCOW2",format=qcow2,if=virtio \\
  -nographic \\
  -serial stdio \\
  \$@

echo "‚úÖ DESQEMU $QCOW2_NAME –∑–∞–≤–µ—Ä—à–µ–Ω"
EOF

chmod +x "$QCOW2_DIR/run-$QCOW2_NAME.sh"

log_success "üöÄ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞: $QCOW2_DIR/run-$QCOW2_NAME.sh"
log_info "üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞: ./run-$QCOW2_NAME.sh" 
