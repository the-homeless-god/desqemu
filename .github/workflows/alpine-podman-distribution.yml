name: –°–æ–∑–¥–∞–Ω–∏–µ Alpine –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ —Å Podman

# When to run this workflow / –ö–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å —ç—Ç–æ—Ç workflow
on:
  push:
    branches: [master]
    paths:
      - '.github/workflows/alpine-podman-distribution.yml'
  pull_request:
    branches: [master]
    paths:
      - '.github/workflows/alpine-podman-distribution.yml'
  workflow_dispatch:  # Manual trigger / –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
    inputs:
      alpine_version:
        description: '–í–µ—Ä—Å–∏—è Alpine Linux'
        required: false
        default: '3.19'
        type: string
      architecture:
        description: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'
        required: false
        default: 'x86_64'
        type: choice
        options:
          - 'x86_64'
          - 'aarch64'
          - 'arm64'
          - 'amd64'

env:
  ALPINE_VERSION: ${{ github.event.inputs.alpine_version || '3.19' }}

jobs:
  create-qemu-portable-archive:
    name: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ —Å QEMU –∏ –º–∏–∫—Ä–æ–≤–º
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [x86_64, aarch64, arm64]
        include:
          - architecture: x86_64
            qemu_arch: x86_64
            host_arch: linux-x64
          - architecture: aarch64  
            qemu_arch: aarch64
            host_arch: linux-arm64
          - architecture: arm64
            qemu_arch: aarch64
            host_arch: linux-arm64
    permissions:
      contents: read
      packages: write
    steps:
      - name: üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è | Get repository code
        uses: actions/checkout@v4

      - name: üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π | Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl xz-utils

      - name: üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ | Create portable archive
        run: |
          echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è ${{ matrix.architecture }}..."
          chmod +x scripts/build-portable.sh
          scripts/build-portable.sh ${{ matrix.architecture }}

      - name: üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ | Create universal installer
        run: |
          echo "üõ†Ô∏è –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫..."
          chmod +x scripts/create-universal-installer.sh
          scripts/create-universal-installer.sh

      - name: ‚¨ÜÔ∏è –ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–π –∞—Ä—Ö–∏–≤ ‚Üí GitHub Artifacts | Upload portable archive to GitHub Artifacts  
        uses: actions/upload-artifact@v4
        with:
          name: desqemu-portable-microvm-${{ matrix.architecture }}
          path: |
            desqemu-portable-microvm-${{ matrix.architecture }}.tar.gz
            install-desqemu-portable-${{ matrix.architecture }}.sh
            install-desqemu-portable.sh
          retention-days: 30

  create-alpine-distribution:
    name: –°–æ–∑–¥–∞–Ω–∏–µ Alpine –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ —Å Podman
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [x86_64, aarch64, arm64, amd64]
        include:
          - architecture: x86_64
            platform: linux/amd64
          - architecture: aarch64
            platform: linux/arm64
          - architecture: arm64
            platform: linux/arm64
          - architecture: amd64
            platform: linux/amd64
    permissions:
      contents: read
      packages: write
    steps:
      - name: üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è | Get repository code
        uses: actions/checkout@v4

      - name: üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker Buildx | Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üî® –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Dockerfile –¥–ª—è CI/CD | Prepare Dockerfile for CI/CD
        run: |
          echo "üê≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º Dockerfile –¥–ª—è CI/CD..."

          # Update Dockerfile with correct Alpine version
          # –û–±–Ω–æ–≤–ª—è–µ–º Dockerfile —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π Alpine
          sed -i "s/FROM alpine:3.19/FROM alpine:${{ env.ALPINE_VERSION }}/" Dockerfile

          # Update labels with correct version
          # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
          sed -i "s/version=\"3.19\"/version=\"${{ env.ALPINE_VERSION }}\"/" Dockerfile

      - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ Alpine –æ–±—Ä–∞–∑–∞ | Build Alpine image
        run: |
          echo "üî® –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π Alpine –æ–±—Ä–∞–∑ –¥–ª—è ${{ matrix.platform }}..."
          docker buildx build --platform ${{ matrix.platform }} --target final-image -t desqemu-alpine:latest .

      - name: üöÄ –ü—É—à –≤ GitHub Container Registry | Push to GitHub Container Registry
        run: |
          echo "üöÄ –ü—É—à–∏–º –æ–±—Ä–∞–∑ –≤ GitHub Container Registry..."

          # Login to GitHub Container Registry using GITHUB_TOKEN
          # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ GitHub Container Registry –∏—Å–ø–æ–ª—å–∑—É—è GITHUB_TOKEN
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Tag image for GitHub Container Registry
          # –û–±–≤–µ—à–∏–≤–∞–µ–º —Ç–µ–≥–æ–º –æ–±—Ä–∞–∑ –¥–ª—è GitHub Container Registry
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/desqemu-alpine"
          
          # Build and push with platform-specific tags
          # –°–æ–±–∏—Ä–∞–µ–º –∏ –ø—É—à–∏–º —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
          docker buildx build --platform ${{ matrix.platform }} --target final-image \
            -t "$IMAGE_NAME:latest" \
            -t "$IMAGE_NAME:${{ env.ALPINE_VERSION }}" \
            -t "$IMAGE_NAME:${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}" \
            --push .

          echo "‚úÖ –û–±—Ä–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ ghcr.io/${{ github.repository_owner }}/desqemu-alpine"
          echo "üì• –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: docker pull ghcr.io/${{ github.repository_owner }}/desqemu-alpine:latest"

      - name: üì¶ –≠–∫—Å–ø–æ—Ä—Ç –≤ rootfs –¥–ª—è chroot | Export to rootfs for chroot
        run: |
          echo "üì¶ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–∑ –≤ rootfs..."

          # Create container and export its filesystem to a temporary directory
          # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          mkdir -p rootfs-temp
          CONTAINER_ID=$(docker create desqemu-alpine:latest)
          docker export $CONTAINER_ID | tar -C rootfs-temp -x
          docker rm $CONTAINER_ID

          # Create rootfs archive (exclude virtual filesystems)
          # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ rootfs (–∏—Å–∫–ª—é—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã)
          cd rootfs-temp
          tar -czf "../desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz" \
            --exclude='./dev/*' \
            --exclude='./proc/*' \
            --exclude='./sys/*' \
            --exclude='./tmp/*' \
            --exclude='./run/*' \
            --exclude='./mnt/*' \
            --exclude='./media/*' \
            --exclude='./.dockerenv' \
            .
          cd ..

          # Clean up temporary files / –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          rm -rf rootfs-temp

          echo "‚úÖ Rootfs —Å–æ–∑–¥–∞–Ω: $(du -h desqemu-alpine-rootfs-*.tar.gz | cut -f1)"

      - name: üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞ | Save Docker image
        run: |
          echo "üê≥ –°–æ—Ö—Ä–∞–Ω—è–µ–º Docker –æ–±—Ä–∞–∑..."
          docker save desqemu-alpine:latest | gzip > desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz
          echo "‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $(du -h desqemu-alpine-docker-*.tar.gz | cut -f1)"

      - name: üìö –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ | Create documentation
        run: |
          echo "üìö –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ —Å–∫—Ä–∏–ø—Ç—ã..."
          chmod +x scripts/create-all-docs.sh
          scripts/create-all-docs.sh ${{ env.ALPINE_VERSION }} ${{ matrix.architecture }} ${{ github.repository_owner }}



      - name: ‚¨ÜÔ∏è Docker –æ–±—Ä–∞–∑ ‚Üí GitHub Artifacts | Upload Docker image to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}
          path: |
            desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz
            quick-start-docker.sh
            quick-start-with-compose.sh
            DESQEMU-Alpine-README.md
          retention-days: 30

      - name: ‚¨ÜÔ∏è Rootfs ‚Üí GitHub Artifacts | Upload rootfs to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}
          path: |
            desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz
            quick-start-rootfs.sh
            quick-start-with-compose.sh
            DESQEMU-Alpine-README.md
          retention-days: 30

      - name: ‚¨ÜÔ∏è Release notes ‚Üí Artifacts | Upload release notes to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md
          retention-days: 7

      - name: üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ GitHub Release | Create GitHub Release (tags only)
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: "DESQEMU Alpine Linux ${{ env.ALPINE_VERSION }} —Å Podman"
          body_path: release-notes.md
          files: |
            desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz
            desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz
            quick-start-docker.sh
            quick-start-rootfs.sh
            quick-start-with-compose.sh
            DESQEMU-Alpine-README.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-portable-release:
    name: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤
    runs-on: ubuntu-latest
    needs: [create-qemu-portable-archive]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è | Get repository code
        uses: actions/checkout@v4

      - name: üì¶ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤ | Download all portable archives
        uses: actions/download-artifact@v4
        with:
          pattern: desqemu-portable-microvm-*
          merge-multiple: true

      - name: üìù –°–æ–∑–¥–∞–Ω–∏–µ release notes –¥–ª—è –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤ | Create release notes for portable archives
        run: |
          echo "üìù –°–æ–∑–¥–∞–µ–º release notes –¥–ª—è –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤..."
          chmod +x scripts/create-portable-release-notes.sh
          scripts/create-portable-release-notes.sh "${{ github.repository }}" "${{ github.ref_name }}" "${{ github.repository_owner }}" "${{ github.server_url }}"

      - name: üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ GitHub Release –¥–ª—è –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤ | Create GitHub Release for portable archives
        uses: softprops/action-gh-release@v1
        with:
          name: "üöÄ DESQEMU Portable MicroVM ${{ github.ref_name }}"
          body_path: portable-release-notes.md
          files: |
            desqemu-portable-microvm-*.tar.gz
            install-desqemu-portable-*.sh
            install-desqemu-portable.sh
          tag_name: "${{ github.ref_name }}-portable"
          draft: false
          prerelease: false
          make_latest: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
