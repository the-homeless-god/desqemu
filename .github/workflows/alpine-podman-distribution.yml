name: –°–æ–∑–¥–∞–Ω–∏–µ Alpine –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ —Å Podman

# When to run this workflow / –ö–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å —ç—Ç–æ—Ç workflow
on:
  push:
    branches: [master]
    paths:
      - '.github/workflows/alpine-podman-distribution.yml'
  pull_request:
    branches: [master]
    paths:
      - '.github/workflows/alpine-podman-distribution.yml'
  workflow_dispatch:  # Manual trigger / –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
    inputs:
      alpine_version:
        description: '–í–µ—Ä—Å–∏—è Alpine Linux'
        required: false
        default: '3.19'
        type: string
      architecture:
        description: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'
        required: false
        default: 'x86_64'
        type: choice
        options:
          - 'x86_64'
          - 'aarch64'

env:
  ALPINE_VERSION: ${{ github.event.inputs.alpine_version || '3.19' }}
  ARCHITECTURE: ${{ github.event.inputs.architecture || 'x86_64' }}

jobs:
  create-alpine-distribution:
    name: –°–æ–∑–¥–∞–Ω–∏–µ Alpine –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ —Å Podman
    runs-on: ubuntu-latest

    steps:
      # Get our code / –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à –∫–æ–¥
      - name: Checkout —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v4

      # We need Docker to build the Alpine image (Podman will be INSIDE the image)
      # –ù–∞–º –Ω—É–∂–µ–Ω Docker –¥–ª—è —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞ Alpine (Podman –±—É–¥–µ—Ç –í–ù–£–¢–†–ò –æ–±—Ä–∞–∑–∞)
      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Create the custom Alpine image with Podman pre-installed
      # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π Alpine –æ–±—Ä–∞–∑ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º Podman
      - name: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ Alpine –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
        run: |
          echo "üê≥ –°–æ–∑–¥–∞–µ–º Alpine –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ —Å Podman –∏ Chromium..."

          # Build a Dockerfile that installs everything we need
          # –°–æ–∑–¥–∞–µ–º Dockerfile –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ
          cat > Dockerfile.alpine-custom << 'EOF'
          FROM alpine:${{ env.ALPINE_VERSION }}

          # Basic image info / –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–µ
          LABEL org.opencontainers.image.title="DESQEMU Alpine with Podman"
          LABEL org.opencontainers.image.description="Alpine Linux —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º Podman –∏ Chromium –¥–ª—è DESQEMU"
          LABEL org.opencontainers.image.source="https://github.com/${{ github.repository }}"
          LABEL org.opencontainers.image.version="${{ env.ALPINE_VERSION }}"

          # Install all the packages we need for container management and web UI
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
          RUN apk update && apk upgrade && \
              apk add --no-cache \
                podman \
                docker-cli \
                docker-compose \
                chromium \
                chromium-chromedriver \
                curl \
                wget \
                bash \
                git \
                nano \
                htop \
                openssh \
                openrc \
                shadow \
                sudo \
                dbus \
                python3 \
                py3-pip \
                nodejs \
                npm \
                xvfb \
                x11vnc \
                fluxbox

          # Create main user for DESQEMU with sudo access
          # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è DESQEMU —Å –ø—Ä–∞–≤–∞–º–∏ sudo
          RUN adduser -D -s /bin/bash desqemu && \
              echo "desqemu:desqemu" | chpasswd && \
              addgroup desqemu wheel && \
              addgroup docker && \
              addgroup desqemu docker && \
              echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

          # Set root password for admin access / –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å root –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
          # TODO: Change to github actions secret
          RUN echo "root:root" | chpasswd

          # Configure Podman to use common registries
          # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Podman –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—â–∏—Ö registry
          RUN mkdir -p /home/desqemu/.config/containers
          COPY --chown=desqemu:desqemu <<REGEOF /home/desqemu/.config/containers/registries.conf
          unqualified-search-registries = ["docker.io"]

          [[registry]]
          location = "docker.io"

          [[registry]]
          location = "registry.fedoraproject.org"

          [[registry]]
          location = "quay.io"
          REGEOF

          # Create a welcome message that shows what's available
          # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
          COPY --chown=desqemu:desqemu <<PROFEOF /home/desqemu/.profile
          echo "üê≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DESQEMU Alpine Linux!"
          echo "üì¶ Podman –≤–µ—Ä—Å–∏—è: \$(podman --version)"
          echo "üåê Chromium –≤–µ—Ä—Å–∏—è: \$(chromium --version)"
          echo "üöÄ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π!"
          echo ""
          echo "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
          echo "  podman run hello-world                    - —Ç–µ—Å—Ç Podman"
          echo "  podman ps                                 - —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
          echo "  chromium --headless --remote-debugging-port=9222 - headless Chromium"
          echo "  startx                                    - –∑–∞–ø—É—Å–∫ X11 –æ–∫—Ä—É–∂–µ–Ω–∏—è"
          echo ""
          PROFEOF

          # Script to start X11 environment for GUI apps
          # –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ X11 –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
          COPY --chown=desqemu:desqemu <<STARTXEOF /home/desqemu/start-desktop.sh
          #!/bin/bash
          export DISPLAY=:1
          Xvfb :1 -screen 0 1024x768x16 &
          sleep 2
          fluxbox &
          x11vnc -display :1 -forever -usepw -create &
          echo "üñ•Ô∏è  –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞ display :1"
          echo "üåê VNC –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5900 (–ø–∞—Ä–æ–ª—å: desqemu)"
          STARTXEOF

          RUN chmod +x /home/desqemu/start-desktop.sh

          # Auto-start script for DESQEMU services (web server, VNC setup)
          # –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ DESQEMU (–≤–µ–±-—Å–µ—Ä–≤–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ VNC)
          COPY <<APIEOF /etc/local.d/desqemu-services.start
          #!/bin/sh

          # Start simple web server for DESQEMU interface
          # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ DESQEMU
          su desqemu -c 'cd /home/desqemu && python3 -m http.server 8080 > /tmp/desqemu-web.log 2>&1 &'

          # Set up VNC password for remote desktop access
          # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å VNC –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É
          # TODO: Change to github actions secret
          su desqemu -c 'mkdir -p /home/desqemu/.vnc && echo "desqemu" | vncpasswd -f > /home/desqemu/.vnc/passwd && chmod 600 /home/desqemu/.vnc/passwd'

          echo "‚úÖ DESQEMU —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
          APIEOF

          RUN chmod +x /etc/local.d/desqemu-services.start

          # Enable services to start automatically / –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
          RUN rc-update add dbus default && \
              rc-update add sshd default && \
              rc-update add local default

          # Open ports for web interface, SSH, and VNC
          # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç—ã –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, SSH –∏ VNC
          EXPOSE 8080 22 5900

          # Set working directory and default user
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          WORKDIR /home/desqemu
          USER desqemu

          # Default command / –ö–æ–º–∞–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          CMD ["/bin/bash", "-l"]
          EOF

      # Build the actual Docker image with our Dockerfile
      # –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑ –∏–∑ –Ω–∞—à–µ–≥–æ Dockerfile
      - name: –°–±–æ—Ä–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ Alpine –æ–±—Ä–∞–∑–∞
        run: |
          echo "üî® –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π Alpine –æ–±—Ä–∞–∑..."
          docker build -f Dockerfile.alpine-custom -t desqemu-alpine:latest .

      # Export the filesystem as a tar.gz for chroot usage
      # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ tar.gz –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ chroot
      - name: –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞–∑–∞ –≤ rootfs
        run: |
          echo "üì¶ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–∑ –≤ rootfs..."

          # Create container and export its filesystem to a temporary directory
          # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          mkdir -p rootfs-temp
          CONTAINER_ID=$(docker create desqemu-alpine:latest)
          docker export $CONTAINER_ID | tar -C rootfs-temp -x
          docker rm $CONTAINER_ID

          # Create rootfs archive (exclude virtual filesystems)
          # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ rootfs (–∏—Å–∫–ª—é—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã)
          cd rootfs-temp
          tar -czf "../desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ env.ARCHITECTURE }}.tar.gz" \
            --exclude='./dev/*' \
            --exclude='./proc/*' \
            --exclude='./sys/*' \
            --exclude='./tmp/*' \
            --exclude='./run/*' \
            --exclude='./mnt/*' \
            --exclude='./media/*' \
            --exclude='./.dockerenv' \
            .
          cd ..

          # Clean up temporary files / –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          rm -rf rootfs-temp

          echo "‚úÖ Rootfs —Å–æ–∑–¥–∞–Ω: $(du -h desqemu-alpine-rootfs-*.tar.gz | cut -f1)"

      # Save the Docker image for easy loading
      # –°–æ—Ö—Ä–∞–Ω—è–µ–º Docker –æ–±—Ä–∞–∑ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      - name: –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        run: |
          echo "üê≥ –°–æ—Ö—Ä–∞–Ω—è–µ–º Docker –æ–±—Ä–∞–∑..."
          docker save desqemu-alpine:latest | gzip > desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ env.ARCHITECTURE }}.tar.gz
          echo "‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $(du -h desqemu-alpine-docker-*.tar.gz | cut -f1)"

      # Create documentation explaining how to use everything
      # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∫–∞–∫ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
      - name: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        run: |
          cat > DESQEMU-Alpine-README.md << 'EOF'
          # üê≥ DESQEMU Alpine Linux —Å Podman –∏ Chromium

          –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Alpine Linux, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è DESQEMU.

          ## üìã –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:

          - **Alpine Linux ${{ env.ALPINE_VERSION }}** (${{ env.ARCHITECTURE }})
          - **Podman** - –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
          - **Docker CLI** - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Docker
          - **Docker Compose** - –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
          - **Chromium** - –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä –¥–ª—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
          - **X11/VNC** - –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
          - **SSH —Å–µ—Ä–≤–µ—Ä** - —É–¥–∞–ª–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
          - **Python 3** - –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ API
          - **Node.js** - –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π

          ## üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:

          - **root** (–ø–∞—Ä–æ–ª—å: root) - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
          - **desqemu** (–ø–∞—Ä–æ–ª—å: desqemu) - –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

          ## üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:

          ### –ö–∞–∫ Docker –æ–±—Ä–∞–∑:
          ```bash
          # –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑
          docker load < desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ env.ARCHITECTURE }}.tar.gz

          # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          docker run -it --privileged \
            -p 8080:8080 \
            -p 5900:5900 \
            -p 2222:22 \
            desqemu-alpine:latest
          ```

          ### –ö–∞–∫ rootfs:
          ```bash
          # –†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –≤ chroot –æ–∫—Ä—É–∂–µ–Ω–∏–µ
          sudo mkdir /opt/desqemu-alpine
          sudo tar -xzf desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ env.ARCHITECTURE }}.tar.gz -C /opt/desqemu-alpine

          # –í–æ–π—Ç–∏ –≤ chroot
          sudo chroot /opt/desqemu-alpine /bin/bash
          ```

          ## üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:

          - **8080** - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å DESQEMU
          - **5900** - VNC —Å–µ—Ä–≤–µ—Ä (–ø–∞—Ä–æ–ª—å: desqemu)
          - **22** - SSH —Å–µ—Ä–≤–µ—Ä

          ## üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:

          ```bash
          # –¢–µ—Å—Ç Podman
          podman run hello-world

          # –¢–µ—Å—Ç Chromium (headless)
          chromium --headless --remote-debugging-port=9222

          # –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
          ./start-desktop.sh
          ```

          ## üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DESQEMU:

          –≠—Ç–æ—Ç –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å DESQEMU –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
          –Ω–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ Docker Compose —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–ª–Ω–æ–π
          –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —á–µ—Ä–µ–∑ Chromium.

          ---

          **–°–æ–∑–¥–∞–Ω–æ:** $(date)
          **–í–µ—Ä—Å–∏—è:** DESQEMU Alpine ${{ env.ALPINE_VERSION }}
          **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:** ${{ env.ARCHITECTURE }}
          **–†–∞–∑–º–µ—Ä:** rootfs ~$(du -h desqemu-alpine-rootfs-*.tar.gz 2>/dev/null | cut -f1 || echo "N/A"), docker ~$(du -h desqemu-alpine-docker-*.tar.gz 2>/dev/null | cut -f1 || echo "N/A")
          EOF

      # Create helper scripts for quick usage / –°–æ–∑–¥–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      - name: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        run: |
          # Script to quickly run the Docker image / –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Docker –æ–±—Ä–∞–∑–∞
          cat > quick-start-docker.sh << 'EOF'
          #!/bin/bash

          echo "üê≥ DESQEMU Alpine Linux - Docker Quick Start"
          echo "==========================================="

          if ! command -v docker &> /dev/null; then
              echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
              echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/"
              exit 1
          fi

          DOCKER_IMAGE="desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ env.ARCHITECTURE }}.tar.gz"

          if [ ! -f "$DOCKER_IMAGE" ]; then
              echo "‚ùå –§–∞–π–ª $DOCKER_IMAGE –Ω–µ –Ω–∞–π–¥–µ–Ω!"
              echo "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª–∏ –∞—Ä—Ö–∏–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é."
              exit 1
          fi

          echo "üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º Docker –æ–±—Ä–∞–∑..."
          docker load < "$DOCKER_IMAGE"

          echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º DESQEMU Alpine –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
          echo "üìù –õ–æ–≥–∏–Ω: desqemu / –ü–∞—Ä–æ–ª—å: desqemu"
          echo "üåê Web: http://localhost:8080"
          echo "üñ•Ô∏è  VNC: localhost:5900 (–ø–∞—Ä–æ–ª—å: desqemu)"
          echo "üîê SSH: ssh desqemu@localhost -p 2222"
          echo ""

          docker run -it --privileged --rm \
            -p 8080:8080 \
            -p 5900:5900 \
            -p 2222:22 \
            --name desqemu-alpine \
            desqemu-alpine:latest
          EOF

          chmod +x quick-start-docker.sh

          # Script to use rootfs in chroot / –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è rootfs –≤ chroot
          cat > quick-start-rootfs.sh << 'EOF'
          #!/bin/bash

          echo "üê≥ DESQEMU Alpine Linux - Rootfs Quick Start"
          echo "==========================================="

          if [ "$EUID" -ne 0 ]; then
              echo "‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ root"
              echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo $0"
              exit 1
          fi

          ROOTFS_FILE="desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ env.ARCHITECTURE }}.tar.gz"
          CHROOT_DIR="/opt/desqemu-alpine"

          if [ ! -f "$ROOTFS_FILE" ]; then
              echo "‚ùå –§–∞–π–ª $ROOTFS_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω!"
              exit 1
          fi

          echo "üì¶ –°–æ–∑–¥–∞–µ–º chroot –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤ $CHROOT_DIR..."
          mkdir -p "$CHROOT_DIR"
          tar -xzf "$ROOTFS_FILE" -C "$CHROOT_DIR"

          echo "üîß –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º chroot..."
          mount --bind /dev "$CHROOT_DIR/dev"
          mount --bind /proc "$CHROOT_DIR/proc"
          mount --bind /sys "$CHROOT_DIR/sys"

          echo "üöÄ –í—Ö–æ–¥–∏–º –≤ DESQEMU Alpine chroot..."
          echo "üìù –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: su desqemu"
          echo "üè† –î–æ–º–∞—à–Ω—è—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: /home/desqemu"
          echo ""

          chroot "$CHROOT_DIR" /bin/bash

          echo "üßπ –û—á–∏—â–∞–µ–º mount points..."
          umount "$CHROOT_DIR/dev" 2>/dev/null || true
          umount "$CHROOT_DIR/proc" 2>/dev/null || true
          umount "$CHROOT_DIR/sys" 2>/dev/null || true
          EOF

          chmod +x quick-start-rootfs.sh

      # Create release notes for GitHub releases
      # –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –æ —Ä–µ–ª–∏–∑–µ –¥–ª—è GitHub releases
      - name: –°–æ–∑–¥–∞–Ω–∏–µ release notes
        run: |
          cat > release-notes.md << 'EOF'
          # üê≥ DESQEMU Alpine Linux —Å Podman v${{ env.ALPINE_VERSION }}

          –ì–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Alpine Linux —Å Podman –∏ Chromium –¥–ª—è DESQEMU.

          ## üéØ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:
          - Alpine Linux ${{ env.ALPINE_VERSION }} (${{ env.ARCHITECTURE }})
          - Podman + Docker CLI + Docker Compose
          - Chromium + X11/VNC –¥–ª—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
          - Python 3 + Node.js –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
          - SSH —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
          - –ì–æ—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞

          ## üì¶ –§–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:

          ### üê≥ Docker –æ–±—Ä–∞–∑ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
          - `desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ env.ARCHITECTURE }}.tar.gz` - –≥–æ—Ç–æ–≤—ã–π Docker –æ–±—Ä–∞–∑
          - `quick-start-docker.sh` - —Å–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

          ### üìÅ Rootfs –¥–ª—è chroot:
          - `desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ env.ARCHITECTURE }}.tar.gz` - —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
          - `quick-start-rootfs.sh` - —Å–∫—Ä–∏–ø—Ç –¥–ª—è chroot

          ## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:

          ```bash
          # Docker –≤–∞—Ä–∏–∞–Ω—Ç
          ./quick-start-docker.sh

          # Rootfs –≤–∞—Ä–∏–∞–Ω—Ç (—Ç—Ä–µ–±—É–µ—Ç root)
          sudo ./quick-start-rootfs.sh
          ```

          ## üåê –î–æ—Å—Ç—É–ø:
          - Web: http://localhost:8080
          - VNC: localhost:5900 (–ø–∞—Ä–æ–ª—å: desqemu)
          - SSH: ssh desqemu@localhost -p 2222

          ## üìä –†–∞–∑–º–µ—Ä—ã:
          - Docker –æ–±—Ä–∞–∑: ~$(du -h desqemu-alpine-docker-*.tar.gz 2>/dev/null | cut -f1 || echo "N/A")
          - Rootfs: ~$(du -h desqemu-alpine-rootfs-*.tar.gz 2>/dev/null | cut -f1 || echo "N/A")

          ---

          –°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ GitHub Actions $(date)
          EOF

      # Upload Docker image to GitHub artifacts / –ó–∞–≥—Ä—É–∂–∞–µ–º Docker –æ–±—Ä–∞–∑ –≤ GitHub artifacts
      - name: –ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–∞ –≤ artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ env.ARCHITECTURE }}
          path: |
            desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ env.ARCHITECTURE }}.tar.gz
            quick-start-docker.sh
            DESQEMU-Alpine-README.md
          retention-days: 30

      # Upload rootfs to GitHub artifacts / –ó–∞–≥—Ä—É–∂–∞–µ–º rootfs –≤ GitHub artifacts
      - name: –ó–∞–≥—Ä—É–∑–∫–∞ Rootfs –≤ artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ env.ARCHITECTURE }}
          path: |
            desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ env.ARCHITECTURE }}.tar.gz
            quick-start-rootfs.sh
            DESQEMU-Alpine-README.md
          retention-days: 30

      # Upload release notes for reference / –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –æ —Ä–µ–ª–∏–∑–µ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
      - name: –ó–∞–≥—Ä—É–∑–∫–∞ release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md
          retention-days: 7

      # Create actual GitHub release if this is a tag
      # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π GitHub —Ä–µ–ª–∏–∑ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–≥
      - name: –°–æ–∑–¥–∞–Ω–∏–µ GitHub Release (–µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–≥)
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: "DESQEMU Alpine Linux ${{ env.ALPINE_VERSION }} —Å Podman"
          body_path: release-notes.md
          files: |
            desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ env.ARCHITECTURE }}.tar.gz
            desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ env.ARCHITECTURE }}.tar.gz
            quick-start-docker.sh
            quick-start-rootfs.sh
            DESQEMU-Alpine-README.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
