name: –°–æ–∑–¥–∞–Ω–∏–µ Alpine –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ —Å Podman

# When to run this workflow / –ö–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å —ç—Ç–æ—Ç workflow
on:
  push:
    branches: [master]
    paths:
      - '.github/workflows/alpine-podman-distribution.yml'
  pull_request:
    branches: [master]
    paths:
      - '.github/workflows/alpine-podman-distribution.yml'
  workflow_dispatch:  # Manual trigger / –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
    inputs:
      alpine_version:
        description: '–í–µ—Ä—Å–∏—è Alpine Linux'
        required: false
        default: '3.19'
        type: string
      architecture:
        description: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'
        required: false
        default: 'x86_64'
        type: choice
        options:
          - 'x86_64'
          - 'aarch64'
          - 'arm64'
          - 'amd64'

env:
  ALPINE_VERSION: ${{ github.event.inputs.alpine_version || '3.19' }}

jobs:
  create-alpine-distribution:
    name: –°–æ–∑–¥–∞–Ω–∏–µ Alpine –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ —Å Podman
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [x86_64, aarch64, arm64, amd64]
        include:
          - architecture: x86_64
            platform: linux/amd64
          - architecture: aarch64
            platform: linux/arm64
          - architecture: arm64
            platform: linux/arm64
          - architecture: amd64
            platform: linux/amd64
    permissions:
      contents: read
      packages: write
    steps:
      - name: üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è | Get repository code
        uses: actions/checkout@v4

      - name: üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker Buildx | Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üî® –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Dockerfile –¥–ª—è CI/CD | Prepare Dockerfile for CI/CD
        run: |
          echo "üê≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º Dockerfile –¥–ª—è CI/CD..."

          # Update Dockerfile with correct Alpine version
          # –û–±–Ω–æ–≤–ª—è–µ–º Dockerfile —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π Alpine
          sed -i "s/FROM alpine:3.19/FROM alpine:${{ env.ALPINE_VERSION }}/" Dockerfile

          # Update labels with correct version
          # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
          sed -i "s/version=\"3.19\"/version=\"${{ env.ALPINE_VERSION }}\"/" Dockerfile

      - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ Alpine –æ–±—Ä–∞–∑–∞ | Build Alpine image
        run: |
          echo "üî® –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π Alpine –æ–±—Ä–∞–∑ –¥–ª—è ${{ matrix.platform }}..."
          
          # Build image locally first for export
          # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
          docker buildx build --platform ${{ matrix.platform }} --target final-image \
            -t desqemu-alpine:latest \
            --load .
          
          echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"

      - name: üì¶ –≠–∫—Å–ø–æ—Ä—Ç –≤ rootfs –¥–ª—è chroot | Export to rootfs for chroot
        run: |
          echo "üì¶ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–∑ –≤ rootfs..."

          # Create container and export its filesystem to a temporary directory
          # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          mkdir -p rootfs-temp
          
          # Use the local image we just built
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–±—Ä–∞–ª–∏
          CONTAINER_ID=$(docker create desqemu-alpine:latest)
          docker export $CONTAINER_ID | tar -C rootfs-temp -x
          docker rm $CONTAINER_ID

          # Create rootfs archive (exclude virtual filesystems)
          # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ rootfs (–∏—Å–∫–ª—é—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã)
          cd rootfs-temp
          tar -czf "../desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz" \
            --exclude='./dev/*' \
            --exclude='./proc/*' \
            --exclude='./sys/*' \
            --exclude='./tmp/*' \
            --exclude='./run/*' \
            --exclude='./mnt/*' \
            --exclude='./media/*' \
            --exclude='./.dockerenv' \
            .
          cd ..

          # Clean up temporary files / –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          rm -rf rootfs-temp

          echo "‚úÖ Rootfs —Å–æ–∑–¥–∞–Ω: $(du -h desqemu-alpine-rootfs-*.tar.gz | cut -f1)"

      - name: üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞ | Save Docker image
        run: |
          echo "üê≥ –°–æ—Ö—Ä–∞–Ω—è–µ–º Docker –æ–±—Ä–∞–∑..."
          
          # Use the local image we just built
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–±—Ä–∞–ª–∏
          docker save desqemu-alpine:latest | gzip > desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz
          echo "‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $(du -h desqemu-alpine-docker-*.tar.gz | cut -f1)"

      - name: üìö –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ | Create documentation
        run: |
          cat > DESQEMU-Alpine-README.md << 'EOF'
          # üê≥ DESQEMU Alpine Linux —Å Podman –∏ Chromium

          –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Alpine Linux, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è DESQEMU.

          ## üìã –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:

          - **Alpine Linux ${{ env.ALPINE_VERSION }}** (${{ matrix.architecture }})
          - **Podman** - –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
          - **Docker CLI** - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Docker
          - **Docker Compose** - –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
          - **QEMU** - –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω
          - **Chromium** - –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä –¥–ª—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
          - **X11/VNC** - –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
          - **SSH —Å–µ—Ä–≤–µ—Ä** - —É–¥–∞–ª–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
          - **Python 3** - –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ API
          - **Node.js** - –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
          - **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ docker-compose.yml**
          - **–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—Ç—É**

          ## üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:

          - **root** (–ø–∞—Ä–æ–ª—å: root) - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
          - **desqemu** (–ø–∞—Ä–æ–ª—å: desqemu) - –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

          ## üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:

          ### –ò–∑ GitHub Container Registry (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
          ```bash
          # –°–∫–∞—á–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ GitHub
          docker run -it --privileged \
            -p 8080:8080 \
            -p 5900:5900 \
            -p 2222:22 \
            ghcr.io/${{ github.repository_owner }}/desqemu-alpine:latest

          # –ò–ª–∏ —Å–∫–∞—á–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
          docker pull ghcr.io/${{ github.repository_owner }}/desqemu-alpine:latest

          # –ó–∞–ø—É—Å–∫ —Å –≤–∞—à–∏–º docker-compose.yml
          ./quick-start-with-compose.sh ./my-app/docker-compose.yml
          ```

          ### –ö–∞–∫ Docker –æ–±—Ä–∞–∑ –∏–∑ –∞—Ä—Ö–∏–≤–∞:
          ```bash
          # –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑
          docker load < desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz

          # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          docker run -it --privileged \
            -p 8080:8080 \
            -p 5900:5900 \
            -p 2222:22 \
            desqemu-alpine:latest
          ```

          ### –ö–∞–∫ rootfs:
          ```bash
          # –†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –≤ chroot –æ–∫—Ä—É–∂–µ–Ω–∏–µ
          sudo mkdir /opt/desqemu-alpine
          sudo tar -xzf desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz -C /opt/desqemu-alpine

          # –í–æ–π—Ç–∏ –≤ chroot
          sudo chroot /opt/desqemu-alpine /bin/bash
          ```

          ## üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:

          - **8080** - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å DESQEMU
          - **5900** - VNC —Å–µ—Ä–≤–µ—Ä (–ø–∞—Ä–æ–ª—å: desqemu)
          - **22** - SSH —Å–µ—Ä–≤–µ—Ä

          ## üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:

          ```bash
          # –¢–µ—Å—Ç Podman
          podman run hello-world

          # –¢–µ—Å—Ç Chromium (headless)
          chromium --headless --remote-debugging-port=9222

          # –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
          ./start-desktop.sh

          # –¢–µ—Å—Ç —Å docker-compose.yml
          echo 'version: "3"
          services:
            nginx:
              image: nginx:alpine
              ports:
                - "8080:80"' > test-compose.yml
          ./quick-start-with-compose.sh test-compose.yml
          ```

          ## üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DESQEMU:

          –≠—Ç–æ—Ç –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å DESQEMU –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
          –Ω–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ Docker Compose —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–ª–Ω–æ–π
          –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —á–µ—Ä–µ–∑ Chromium.

          ---

          **–°–æ–∑–¥–∞–Ω–æ:** $(date)
          **–í–µ—Ä—Å–∏—è:** DESQEMU Alpine ${{ env.ALPINE_VERSION }}
          **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:** ${{ matrix.architecture }}
          **GitHub Registry:** ghcr.io/${{ github.repository_owner }}/desqemu-alpine
          **–†–∞–∑–º–µ—Ä:** rootfs ~$(du -h desqemu-alpine-rootfs-*.tar.gz 2>/dev/null | cut -f1 || echo "N/A"), docker ~$(du -h desqemu-alpine-docker-*.tar.gz 2>/dev/null | cut -f1 || echo "N/A")
          EOF

      - name: üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ | Create quick-start scripts
        run: |
          # Script to quickly run the Docker image / –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Docker –æ–±—Ä–∞–∑–∞
          cat > quick-start-docker.sh << 'EOF'
          #!/bin/bash

          echo "üê≥ DESQEMU Alpine Linux - Docker Quick Start"
          echo "==========================================="

          if ! command -v docker &> /dev/null; then
              echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
              echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/"
              exit 1
          fi

          DOCKER_IMAGE="desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz"

          if [ ! -f "$DOCKER_IMAGE" ]; then
              echo "‚ùå –§–∞–π–ª $DOCKER_IMAGE –Ω–µ –Ω–∞–π–¥–µ–Ω!"
              echo "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª–∏ –∞—Ä—Ö–∏–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é."
              exit 1
          fi

          echo "üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º Docker –æ–±—Ä–∞–∑..."
          docker load < "$DOCKER_IMAGE"

          echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º DESQEMU Alpine –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
          echo "üìù –õ–æ–≥–∏–Ω: desqemu / –ü–∞—Ä–æ–ª—å: desqemu"
          echo "üåê Web: http://localhost:8080"
          echo "üñ•Ô∏è  VNC: localhost:5900 (–ø–∞—Ä–æ–ª—å: desqemu)"
          echo "üîê SSH: ssh desqemu@localhost -p 2222"
          echo ""

          docker run -it --privileged --rm \
            -p 8080:8080 \
            -p 5900:5900 \
            -p 2222:22 \
            --name desqemu-alpine \
            desqemu-alpine:latest
          EOF

          chmod +x quick-start-docker.sh

          # Script to use rootfs in chroot / –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è rootfs –≤ chroot
          cat > quick-start-rootfs.sh << 'EOF'
          #!/bin/bash

          echo "üê≥ DESQEMU Alpine Linux - Rootfs Quick Start"
          echo "==========================================="

          if [ "$EUID" -ne 0 ]; then
              echo "‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ root"
              echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo $0"
              exit 1
          fi

          ROOTFS_FILE="desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz"
          CHROOT_DIR="/opt/desqemu-alpine"

          if [ ! -f "$ROOTFS_FILE" ]; then
              echo "‚ùå –§–∞–π–ª $ROOTFS_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω!"
              exit 1
          fi

          echo "üì¶ –°–æ–∑–¥–∞–µ–º chroot –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤ $CHROOT_DIR..."
          mkdir -p "$CHROOT_DIR"
          tar -xzf "$ROOTFS_FILE" -C "$CHROOT_DIR"

          echo "üîß –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º chroot..."
          mount --bind /dev "$CHROOT_DIR/dev"
          mount --bind /proc "$CHROOT_DIR/proc"
          mount --bind /sys "$CHROOT_DIR/sys"

          echo "üöÄ –í—Ö–æ–¥–∏–º –≤ DESQEMU Alpine chroot..."
          echo "üìù –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: su desqemu"
          echo "üè† –î–æ–º–∞—à–Ω—è—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: /home/desqemu"
          echo ""

          chroot "$CHROOT_DIR" /bin/bash

          echo "üßπ –û—á–∏—â–∞–µ–º mount points..."
          umount "$CHROOT_DIR/dev" 2>/dev/null || true
          umount "$CHROOT_DIR/proc" 2>/dev/null || true
          umount "$CHROOT_DIR/sys" 2>/dev/null || true
          EOF

          chmod +x quick-start-rootfs.sh

          # Script to run with custom docker-compose.yml
          # –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º docker-compose.yml
          cat > quick-start-with-compose.sh << 'EOF'
          #!/bin/bash

          echo "üê≥ DESQEMU Alpine Linux - Quick Start with Compose"
          echo "=================================================="

          if [ $# -eq 0 ]; then
              echo "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ docker-compose.yml —Ñ–∞–π–ª—É"
              echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <path-to-docker-compose.yml>"
              echo ""
              echo "–ü—Ä–∏–º–µ—Ä—ã:"
              echo "  $0 ./penpot-compose.yml"
              echo "  $0 /path/to/my-app/docker-compose.yml"
              exit 1
          fi

          COMPOSE_FILE="$1"
          if [ ! -f "$COMPOSE_FILE" ]; then
              echo "‚ùå –§–∞–π–ª $COMPOSE_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω!"
              exit 1
          fi

          echo "üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º docker-compose.yml: $COMPOSE_FILE"

          # Create a temporary directory for the compose file
          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è compose —Ñ–∞–π–ª–∞
          TEMP_DIR=$(mktemp -d)
          cp "$COMPOSE_FILE" "$TEMP_DIR/docker-compose.yml"

          echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º DESQEMU Alpine —Å –≤–∞—à–∏–º compose —Ñ–∞–π–ª–æ–º..."
          echo "üìù –õ–æ–≥–∏–Ω: desqemu / –ü–∞—Ä–æ–ª—å: desqemu"
          echo "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
          echo "üñ•Ô∏è  VNC: localhost:5900 (–ø–∞—Ä–æ–ª—å: desqemu)"
          echo "üîê SSH: ssh desqemu@localhost -p 2222"
          echo ""

          # Run the container with the compose file mounted
          # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º compose —Ñ–∞–π–ª–æ–º
          docker run -it --privileged --rm \
            -p 8080:8080 \
            -p 5900:5900 \
            -p 2222:22 \
            -v "$TEMP_DIR:/home/desqemu" \
            --name desqemu-alpine-compose \
            desqemu-alpine:latest

          # Clean up
          rm -rf "$TEMP_DIR"
          EOF

          chmod +x quick-start-with-compose.sh

      - name: üìù –°–æ–∑–¥–∞–Ω–∏–µ release notes | Create release notes
        run: |
          cat > release-notes.md << 'EOF'
          # üê≥ DESQEMU Alpine Linux —Å Podman v${{ env.ALPINE_VERSION }}

          –ì–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Alpine Linux —Å Podman –∏ Chromium –¥–ª—è DESQEMU.

          ## üéØ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:
          - Alpine Linux ${{ env.ALPINE_VERSION }} (${{ matrix.architecture }})
          - Podman + Docker CLI + Docker Compose
          - QEMU –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω
          - Chromium + X11/VNC –¥–ª—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
          - Python 3 + Node.js –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
          - SSH —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
          - –ì–æ—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞
          - üÜï **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ GitHub Container Registry**
          - üÜï **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ docker-compose.yml**
          - üÜï **–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—Ç—É**

          ## üì¶ –°–ø–æ—Å–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

          ### üöÄ GitHub Container Registry (—Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π):
          ```bash
          docker run -it --privileged \
            -p 8080:8080 -p 5900:5900 -p 2222:22 \
            ghcr.io/${{ github.repository_owner }}/desqemu-alpine:latest
          ```

          ### üìÅ –§–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:

          **üê≥ Docker –æ–±—Ä–∞–∑:**
          - `desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz` - –≥–æ—Ç–æ–≤—ã–π Docker –æ–±—Ä–∞–∑
          - `quick-start-docker.sh` - —Å–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
          - `quick-start-with-compose.sh` - —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å docker-compose.yml

          **üìÅ Rootfs –¥–ª—è chroot:**
          - `desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz` - —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
          - `quick-start-rootfs.sh` - —Å–∫—Ä–∏–ø—Ç –¥–ª—è chroot
          - `quick-start-with-compose.sh` - —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å docker-compose.yml

          ## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:

          ```bash
          # –ò–∑ GitHub Container Registry (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
          docker pull ghcr.io/${{ github.repository_owner }}/desqemu-alpine:latest

          # –ò–∑ –∞—Ä—Ö–∏–≤–æ–≤
          ./quick-start-docker.sh

          # Rootfs –≤–∞—Ä–∏–∞–Ω—Ç (—Ç—Ä–µ–±—É–µ—Ç root)
          sudo ./quick-start-rootfs.sh

          # –ó–∞–ø—É—Å–∫ —Å –≤–∞—à–∏–º docker-compose.yml
          ./quick-start-with-compose.sh ./my-app/docker-compose.yml
          ```

          ## üåê –î–æ—Å—Ç—É–ø:
          - Web: http://localhost:8080
          - VNC: localhost:5900 (–ø–∞—Ä–æ–ª—å: desqemu)
          - SSH: ssh desqemu@localhost -p 2222

          ## üìä –†–∞–∑–º–µ—Ä—ã:
          - Docker –æ–±—Ä–∞–∑: ~$(du -h desqemu-alpine-docker-*.tar.gz 2>/dev/null | cut -f1 || echo "N/A")
          - Rootfs: ~$(du -h desqemu-alpine-rootfs-*.tar.gz 2>/dev/null | cut -f1 || echo "N/A")

          ## üîó GitHub Container Registry:
          - **Registry:** ghcr.io/${{ github.repository_owner }}/desqemu-alpine
          - **Tags:** `latest`, `${{ env.ALPINE_VERSION }}`, `${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}`

          ---

          –°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ GitHub Actions $(date)
          EOF

      - name: ‚¨ÜÔ∏è Docker –æ–±—Ä–∞–∑ ‚Üí GitHub Artifacts | Upload Docker image to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}
          path: |
            desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz
            quick-start-docker.sh
            quick-start-with-compose.sh
            DESQEMU-Alpine-README.md
          retention-days: 30

      - name: ‚¨ÜÔ∏è Rootfs ‚Üí GitHub Artifacts | Upload rootfs to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}
          path: |
            desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz
            quick-start-rootfs.sh
            quick-start-with-compose.sh
            DESQEMU-Alpine-README.md
          retention-days: 30

      - name: ‚¨ÜÔ∏è Release notes ‚Üí Artifacts | Upload release notes to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md
          retention-days: 7

      - name: üöÄ –ü—É—à –≤ GitHub Container Registry | Push to GitHub Container Registry
        run: |
          echo "üöÄ –ü—É—à–∏–º –æ–±—Ä–∞–∑ –≤ GitHub Container Registry..."

          # Login to GitHub Container Registry using GITHUB_TOKEN
          # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ GitHub Container Registry –∏—Å–ø–æ–ª—å–∑—É—è GITHUB_TOKEN
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Tag image for GitHub Container Registry
          # –û–±–≤–µ—à–∏–≤–∞–µ–º —Ç–µ–≥–æ–º –æ–±—Ä–∞–∑ –¥–ª—è GitHub Container Registry
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/desqemu-alpine"
          
          # Tag and push the local image
          # –¢–µ–≥–∞–µ–º –∏ –ø—É—à–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑
          docker tag desqemu-alpine:latest "$IMAGE_NAME:latest"
          docker tag desqemu-alpine:latest "$IMAGE_NAME:${{ env.ALPINE_VERSION }}"
          docker tag desqemu-alpine:latest "$IMAGE_NAME:${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}"
          
          docker push "$IMAGE_NAME:latest"
          docker push "$IMAGE_NAME:${{ env.ALPINE_VERSION }}"
          docker push "$IMAGE_NAME:${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}"

          echo "‚úÖ –û–±—Ä–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ ghcr.io/${{ github.repository_owner }}/desqemu-alpine"
          echo "üì• –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: docker pull ghcr.io/${{ github.repository_owner }}/desqemu-alpine:latest"

      - name: üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ GitHub Release | Create GitHub Release (tags only)
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: "DESQEMU Alpine Linux ${{ env.ALPINE_VERSION }} —Å Podman"
          body_path: release-notes.md
          files: |
            desqemu-alpine-docker-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz
            desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz
            quick-start-docker.sh
            quick-start-rootfs.sh
            quick-start-with-compose.sh
            DESQEMU-Alpine-README.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-qemu-microvm:
    name: –°–æ–∑–¥–∞–Ω–∏–µ QEMU MicroVM –æ–±—Ä–∞–∑–∞ –∏–∑ rootfs
    needs: create-alpine-distribution
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [x86_64, aarch64, arm64, amd64]
        include:
          - architecture: x86_64
            platform: linux/amd64
            qemu_arch: x86_64
          - architecture: aarch64
            platform: linux/arm64
            qemu_arch: aarch64
          - architecture: arm64
            platform: linux/arm64
            qemu_arch: aarch64
          - architecture: amd64
            platform: linux/amd64
            qemu_arch: x86_64
    permissions:
      contents: read
      packages: write
    steps:
      - name: üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è | Get repository code
        uses: actions/checkout@v4

      - name: üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ rootfs | Download rootfs artifact
        uses: actions/download-artifact@v4
        with:
          name: desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}

      - name: üõ†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ libguestfs-tools | Install libguestfs-tools
        run: |
          echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º libguestfs-tools –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è qcow2 –æ–±—Ä–∞–∑–æ–≤..."
          sudo apt-get update
          sudo apt-get install -y libguestfs-tools qemu-utils
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
          virt-make-fs --version
          qemu-img --version

      - name: üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ init-—Å–∫—Ä–∏–ø—Ç–∞ | Prepare custom init script
        run: |
          echo "üìù –ö–æ–ø–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π init-—Å–∫—Ä–∏–ø—Ç –¥–ª—è MicroVM..."
          cp microvm-init.sh init
          chmod +x init
          echo "‚úÖ Init-—Å–∫—Ä–∏–ø—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∏–∑ microvm-init.sh"

      - name: üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ qcow2-–æ–±—Ä–∞–∑–∞ –∏–∑ rootfs | Create qcow2 image from rootfs
        run: |
          echo "üî® –°–æ–∑–¥–∞–µ–º QEMU MicroVM –æ–±—Ä–∞–∑ –∏–∑ rootfs..."
          
          ROOTFS_FILE="desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz"
          QCOW2_FILE="desqemu-alpine-microvm-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.qcow2"
          
          if [ ! -f "$ROOTFS_FILE" ]; then
              echo "‚ùå –§–∞–π–ª $ROOTFS_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω!"
              exit 1
          fi
          
          echo "üì¶ –ò—Å—Ö–æ–¥–Ω—ã–π rootfs: $(du -h $ROOTFS_FILE | cut -f1)"
          
          # Create qcow2 image from rootfs tar with extra space
          echo "üîß –°–æ–∑–¥–∞–µ–º qcow2 –æ–±—Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é virt-make-fs..."
          virt-make-fs --format=qcow2 --size=+1G "$ROOTFS_FILE" "$QCOW2_FILE"
          
          echo "üìä –†–∞–∑–º–µ—Ä qcow2 –æ–±—Ä–∞–∑–∞: $(du -h $QCOW2_FILE | cut -f1)"
          echo "‚úÖ QEMU MicroVM –æ–±—Ä–∞–∑ —Å–æ–∑–¥–∞–Ω: $QCOW2_FILE"

      - name: üîß –ò–Ω—ä–µ–∫—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ init –≤ –æ–±—Ä–∞–∑ | Inject custom init into image
        run: |
          echo "üíâ –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π init-—Å–∫—Ä–∏–ø—Ç –≤ qcow2 –æ–±—Ä–∞–∑..."
          
          QCOW2_FILE="desqemu-alpine-microvm-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.qcow2"
          
          # Use guestfish to modify the image
          echo "üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º guestfish –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–∞..."
          
          # Create guestfish script
          cat > modify_image.fish << 'EOF'
          add-ro desqemu-alpine-microvm-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.qcow2
          run
          mount /dev/sda /
          
          # Backup original init if exists
          is-file /sbin/init
          copy-out /sbin/init /tmp/
          
          # Upload our custom init
          upload init /sbin/init
          chmod 755 /sbin/init
          
          # Set proper ownership
          chown 0 0 /sbin/init
          
          # Create desqemu user if not exists
          is-dir /home/desqemu
          mkdir-p /home/desqemu
          chown 1000 1000 /home/desqemu
          
          sync
          umount-all
          EOF
          
          # Apply modifications (create a copy first)
          cp "$QCOW2_FILE" "${QCOW2_FILE}.backup"
          
          # Use guestfish to modify the image
          guestfish -a "$QCOW2_FILE" -m /dev/sda << 'GUESTFISH_EOF'
          # Upload our custom init
          upload init /sbin/init
          chmod 755 /sbin/init
          chown 0 0 /sbin/init
          
          # Ensure desqemu user home exists
          mkdir-p /home/desqemu
          chown 1000 1000 /home/desqemu
          
          sync
          GUESTFISH_EOF
          
          echo "‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π init-—Å–∫—Ä–∏–ø—Ç –≤–Ω–µ–¥—Ä–µ–Ω –≤ –æ–±—Ä–∞–∑"

      - name: üìã –°–æ–∑–¥–∞–Ω–∏–µ QEMU –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ | Create QEMU run script
        run: |
          echo "üìù –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MicroVM –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
          
          # Create run script from template
          cp run-microvm-template.sh run-microvm.sh
          
          # Replace placeholders with actual values
          sed -i "s/QCOW2_IMAGE_PLACEHOLDER/desqemu-alpine-microvm-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.qcow2/" run-microvm.sh
          sed -i "s/QEMU_ARCH_PLACEHOLDER/${{ matrix.qemu_arch }}/" run-microvm.sh
          
          chmod +x run-microvm.sh
          echo "‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞: run-microvm.sh"

      - name: üìã –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ MicroVM | Create MicroVM documentation
        run: |
          cat > DESQEMU-MicroVM-README.md << 'EOF'
          # üöÄ DESQEMU Alpine Linux MicroVM
          
          –ì–æ—Ç–æ–≤—ã–π –∫ –∑–∞–ø—É—Å–∫—É QEMU MicroVM –æ–±—Ä–∞–∑ –Ω–∞ –±–∞–∑–µ Alpine Linux —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Podman –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø—É—Å–∫–æ–º Docker Compose –ø—Ä–æ–µ–∫—Ç–æ–≤.
          
          ## üìã –ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?
          
          –≠—Ç–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π QEMU-–æ–±—Ä–∞–∑ (qcow2), —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ [MergeBoard](https://mergeboard.com/blog/2-qemu-microvm-docker/), –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç:
          
          - **üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω** - –ø–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –≥–∏–ø–µ—Ä–≤–∏–∑–æ—Ä–∞
          - **üê≥ –≠–∫–æ—Å–∏—Å—Ç–µ–º—É Docker** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Docker Compose, –≥–æ—Ç–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã
          - **‚ö° –°–∫–æ—Ä–æ—Å—Ç—å MicroVM** - –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ (~200ms –¥–ª—è —è–¥—Ä–∞)
          - **üéØ –ü—Ä–æ—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ docker-compose.yml
          
          ## üì¶ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—Ä–∞–∑–∞:
          
          - **Alpine Linux ${{ env.ALPINE_VERSION }}** (${{ matrix.architecture }})
          - **Podman + Docker CLI + Docker Compose**
          - **–ö–∞—Å—Ç–æ–º–Ω—ã–π init-—Å–∫—Ä–∏–ø—Ç** —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
          - **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ docker-compose.yml**
          - **SSH —Å–µ—Ä–≤–µ—Ä** (–ø–æ—Ä—Ç 22)
          - **–°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏** (DHCP + fallback)
          - **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å desqemu** (–ø–∞—Ä–æ–ª—å: desqemu)
          
          ## üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫:
          
          ```bash
          # –°–∫–∞—á–∞–π—Ç–µ –æ–±—Ä–∞–∑ –∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∏–∑ GitHub Artifacts
          # –ó–∞—Ç–µ–º –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:
          ./run-microvm.sh
          ```
          
          ## üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:
          
          - **8080** ‚Üí –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          - **5900** ‚Üí VNC —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
          - **2222** ‚Üí SSH –¥–æ—Å—Ç—É–ø
          
          ## üîß –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:
          
          ### –ú–µ—Ç–æ–¥ 1: –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 9p
          ```bash
          # –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ QEMU:
          -fsdev local,path=/path/to/your/project,security_model=none,id=project,readonly \
          -device virtio-9p-device,fsdev=project,mount_tag=project
          
          # –í VM —Å–º–æ–Ω—Ç–∏—Ä—É–π—Ç–µ:
          mount -t 9p -o trans=virtio project /mnt/project
          ```
          
          ### –ú–µ—Ç–æ–¥ 2: –ò–Ω—ä–µ–∫—Ü–∏—è –≤ –æ–±—Ä–∞–∑
          ```bash
          # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ guestfish –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:
          guestfish -a desqemu-alpine-microvm-*.qcow2 -m /dev/sda \
            copy-in /path/to/docker-compose.yml /home/desqemu/
          ```
          
          ## üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
          
          1. **–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ Compose:** –ï—Å–ª–∏ –≤ `/home/desqemu/docker-compose.yml` –Ω–∞–π–¥–µ–Ω compose-—Ñ–∞–π–ª, –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
          2. **–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤:** –ü–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
          3. **–°–µ—Ç–µ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π DHCP —Å fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP
          4. **SSH –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:** SSH —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
          
          ## üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:
          
          **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:** ${{ matrix.architecture }}  
          **QEMU –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:** ${{ matrix.qemu_arch }}  
          **–ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑:** Alpine Linux ${{ env.ALPINE_VERSION }}  
          **–†–∞–∑–º–µ—Ä:** ~$(du -h desqemu-alpine-microvm-*.qcow2 2>/dev/null | cut -f1 || echo "N/A")  
          **–§–æ—Ä–º–∞—Ç:** qcow2 (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–π)  
          
          ## üîó –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ QEMU:
          
          ```bash
          qemu-system-${{ matrix.qemu_arch }} \
              -M microvm,x-option-roms=off,isa-serial=off,rtc=off \
              -m 512M \
              -no-acpi \
              -cpu max \
              -nodefaults \
              -no-user-config \
              -nographic \
              -no-reboot \
              -device virtio-serial-device \
              -chardev stdio,id=virtiocon0 \
              -device virtconsole,chardev=virtiocon0 \
              -drive id=root,file=desqemu-alpine-microvm-*.qcow2,format=qcow2,if=none \
              -device virtio-blk-device,drive=root \
              -netdev user,id=mynet0,hostfwd=tcp:127.0.0.1:8080-:8080,hostfwd=tcp:127.0.0.1:5900-:5900,hostfwd=tcp:127.0.0.1:2222-:22 \
              -device virtio-net-device,netdev=mynet0 \
              -device virtio-rng-device
          ```
          
          ## üê≥ –°–≤—è–∑—å —Å Docker —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π:
          
          –≠—Ç–æ—Ç MicroVM –æ–±—Ä–∞–∑ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –ª—é–±—ã–µ Docker Compose –ø—Ä–æ–µ–∫—Ç—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ:
          
          ```yaml
          # –í–∞—à docker-compose.yml –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
          version: '3'
          services:
            web:
              image: nginx:alpine
              ports:
                - "8080:80"  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
          ```
          
          ---
          
          **–°–æ–∑–¥–∞–Ω–æ:** $(date)  
          **–ú–µ—Ç–æ–¥:** [MergeBoard QEMU MicroVM](https://mergeboard.com/blog/2-qemu-microvm-docker/)  
          **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –ü–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –≥–∏–ø–µ—Ä–≤–∏–∑–æ—Ä–∞ + —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ Docker
          EOF

      - name: ‚¨ÜÔ∏è QEMU MicroVM ‚Üí GitHub Artifacts | Upload QEMU MicroVM to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desqemu-alpine-microvm-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}
          path: |
            desqemu-alpine-microvm-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.qcow2
            run-microvm.sh
            run-microvm-template.sh
            init
            microvm-init.sh
            DESQEMU-MicroVM-README.md
          retention-days: 30

      - name: üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–∑–æ–≤ | Image statistics
        run: |
          echo "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–±—Ä–∞–∑–æ–≤:"
          echo "================================"
          
          if [ -f "desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz" ]; then
              ROOTFS_SIZE=$(du -h "desqemu-alpine-rootfs-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.tar.gz" | cut -f1)
              echo "üìÅ Rootfs (tar.gz): $ROOTFS_SIZE"
          fi
          
          if [ -f "desqemu-alpine-microvm-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.qcow2" ]; then
              QCOW2_SIZE=$(du -h "desqemu-alpine-microvm-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.qcow2" | cut -f1)
              QCOW2_SIZE_BYTES=$(qemu-img info "desqemu-alpine-microvm-${{ env.ALPINE_VERSION }}-${{ matrix.architecture }}.qcow2" | grep "disk size" | awk '{print $3, $4}')
              echo "üöÄ QEMU MicroVM (qcow2): $QCOW2_SIZE (—Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: $QCOW2_SIZE_BYTES)"
          fi
          
          echo ""
          echo "‚úÖ DESQEMU Alpine Linux MicroVM –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
          echo "üîó –°–∫–∞—á–∞–π—Ç–µ –∏–∑ GitHub Artifacts –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ ./run-microvm.sh"
